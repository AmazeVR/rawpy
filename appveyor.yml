environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    
    PYPI_PASS:
      secure: K/M1K0yykepbIoiNCP/exSrT+Vqd3BGabL2B2zS94Mo=

  # Note that we use miniconda, so the minor versions are irrelevant here
  matrix:
    - PYTHON: "C:\\Python27_32"
      PYTHON_VERSION: "2.7.8"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python27_64"
      PYTHON_VERSION: "2.7.8"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python34_32"
      PYTHON_VERSION: "3.4.1"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python34_64"
      PYTHON_VERSION: "3.4.1"
      PYTHON_ARCH: "64"

install:
  - ECHO "Powershell version:"
  - ps: "$PSVersionTable.PSVersion.Major"

  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - "powershell ./appveyor/install.ps1"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # we use conda to prevent compiling numpy and cython
  - "conda install --yes numpy cython"
  - "pip install wheel nose"
  
  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  #- "%CMD_IN_ENV% pip install -r dev-requirements.txt"

build: false  # Not a C# project, build stuff at the test step instead.

test_script:
  # Build the compiled extension and run the project tests
  # -u disables output buffering which caused intermixing of lines
  #  when the external tools were started
  - "%CMD_IN_ENV% python -u setup.py nosetests --verbosity=3 --nocapture"

after_test:
  # If tests are successful, create a whl package for the project.
  - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - ps: "ls dist"

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*

deploy_script:
  - "powershell ./appveyor/pypi_deploy.ps1"
  